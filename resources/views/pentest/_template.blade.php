<!-- resources/views/pentest/_template.blade.php -->
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ $title }}</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap" rel="stylesheet">
    <link rel="icon" type="image/x-icon" href="{{ asset('favicon/favicon_eko.ico') }}">
    <style>
        body {
            font-family: 'Inter', Arial, sans-serif;
        }

        .glass {
            background: rgba(255, 255, 255, 0.85);
            box-shadow: 0 8px 32px 0 rgba(255, 193, 7, 0.15);
            backdrop-filter: blur(6px);
            border-radius: 1.5rem;
        }

        .gradient {
            background: linear-gradient(90deg, #fbbf24 0%, #f59e42 100%);
        }

        .input-focus:focus {
            outline: none;
            border-color: #fbbf24;
            box-shadow: 0 0 0 2px #fbbf2480;
        }

        .shadow-strong {
            box-shadow: 0 4px 24px 0 rgba(251, 191, 36, 0.10);
        }
    </style>
</head>

<body class="bg-gradient-to-br from-yellow-50 via-amber-50 to-yellow-100 min-h-screen">
    <div class="max-w-2xl mx-auto glass shadow-strong p-8 mt-10">
        <a href="/pentest" class="inline-block mb-4 text-amber-600 hover:underline font-semibold">&larr; Kembali ke
            Pilihan Controller</a>
        <h2 class="text-3xl font-extrabold mb-4 gradient bg-clip-text text-transparent">{{ $title }}</h2>
        <div class="bg-amber-50 rounded-lg p-4 mb-6 text-gray-700 border border-amber-100">
            <b class="block mb-2 text-amber-700">Cara Penggunaan Pentest API UI:</b>
            <ol class="list-decimal ml-6 mb-2">
                <li>Pilih endpoint API dari dropdown <b>Pilih Endpoint API</b> di atas, atau isi manual.</li>
                <li>Jika endpoint membutuhkan autentikasi, masukkan token pada kolom <b>Headers</b> dengan format:<br>
                    <code class="bg-gray-200 px-1 py-0.5 rounded">{"Authorization": "Bearer &lt;token&gt;"}</code>
                </li>
                <li>Untuk <b>POST/PUT</b>, isi <b>Body</b> dengan format JSON sesuai kebutuhan endpoint.</li>
                <li>Klik <b>Send</b> untuk mengirim request dan melihat response di bawah.</li>
                <li>Gunakan tombol <b>Kembali</b> untuk memilih controller lain.</li>
            </ol>
            <ul class="list-disc ml-6 text-sm text-gray-600">
                <li>Anda dapat mengedit URL, headers, dan body secara manual untuk eksplorasi lebih lanjut.</li>
                <li>Dropdown endpoint hanya menampilkan endpoint milik controller ini.</li>
            </ul>
        </div>
        <div class="mb-4 grid grid-cols-1 md:grid-cols-2 gap-4 items-start">
            <div>
                <label for="preset" class="font-semibold text-amber-700">Pilih Endpoint API</label>
                <select id="preset" class="block w-full mt-1 rounded-lg border-gray-300 input-focus bg-white/80"
                    onchange="setPresetAndShowApi()">
                    <option value="">-- Pilih endpoint --</option>
                    @foreach ($apiList as $i => $api)
                        <option value='@json($api)'>
                            {{ $api['label'] ?? '[' . $api['method'] . '] ' . $api['url'] }}
                        </option>
                    @endforeach
                </select>
            </div>
            <div>
                <label class="font-semibold text-amber-700">Detail Endpoint</label>
                <input id="apiDetail" type="text"
                    class="block w-full mt-1 rounded-lg border-gray-300 bg-gray-100 text-gray-700 px-2 py-1" disabled>
            </div>
        </div>
        <div class="mb-4">
            <label for="method" class="font-semibold text-amber-700">Method</label>
            <select id="method" class="block w-full mt-1 rounded-lg border-gray-300 input-focus bg-white/80">
                <option>GET</option>
                <option>POST</option>
                <option>PUT</option>
                <option>DELETE</option>
            </select>
        </div>
        <div class="mb-2">
            <label for="url" class="font-semibold text-amber-700">Endpoint URL</label>
            <input id="url" type="text"
                class="block w-full mt-1 rounded-lg border-gray-300 input-focus bg-white/80"
                placeholder="/api/endpoint">
        </div>
        <div class="mb-2 flex items-center gap-2">
            <div class="flex-1">
                <label for="headers" class="font-semibold text-amber-700">Headers (JSON)</label>
                <textarea id="headers" rows="2" class="block w-full mt-1 rounded-lg border-gray-300 input-focus bg-white/80"
                    placeholder='{}'></textarea>
            </div>
            <button id="fillAuthBtn" type="button"
                class="ml-2 bg-gradient-to-r from-amber-400 to-yellow-500 hover:from-yellow-500 hover:to-amber-400 text-white font-bold py-2 px-4 rounded-lg shadow transition"
                style="min-width: 110px;" onclick="fillAuthHeader()">Isi Auth</button>
        </div>
        <div class="mb-2">
            <label for="body" class="font-semibold text-amber-700">Body (JSON, untuk POST/PUT)</label>
            <textarea id="body" rows="4" class="block w-full mt-1 rounded-lg border-gray-300 input-focus bg-white/80"
                placeholder='{"key": "value"}'></textarea>
        </div>
        <div id="api-note" class="mb-4"></div>
        <form id="apiForm" onsubmit="sendRequest(); return false;">
            <button type="submit"
                class="bg-gradient-to-r from-yellow-400 to-amber-500 hover:from-amber-500 hover:to-yellow-400 text-white font-bold py-2 px-8 rounded-lg shadow transition">Send
            </button>
            <button type="button" onclick="resetForm()"
                class="ml-2 bg-gray-200 hover:bg-gray-300 text-gray-700 font-semibold py-2 px-4 rounded-lg shadow transition">Reset
                Form</button>
        </form>
        <div id="response"
            class="response bg-gray-900 text-green-400 p-4 rounded-lg mt-4 whitespace-pre-wrap text-sm font-mono"
            style="display:none;"></div>
    </div>
    <script>
        function setPreset() {
            const preset = document.getElementById('preset').value;
            let placeholderHeaders = '{}';
            if (!preset) {
                document.getElementById('api-note').innerHTML = '';
                document.getElementById('headers').placeholder = placeholderHeaders;
                return;
            }
            let data = JSON.parse(preset);
            document.getElementById('method').value = data.method || 'GET';
            document.getElementById('url').value = data.url || '';
            document.getElementById('body').value = data.body ? JSON.stringify(data.body, null, 2) : '';
            // Tampilkan noteHtml jika ada
            if (data.noteHtml) {
                document.getElementById('api-note').innerHTML = data.noteHtml;
            } else if (data.note) {
                document.getElementById('api-note').innerHTML = '<span class="text-xs text-amber-700">' + data.note +
                    '</span>';
            } else {
                document.getElementById('api-note').innerHTML = '';
            }
            // Logic tombol Isi Auth & placeholder headers
            if (data.headers && data.headers.Authorization) {
                document.getElementById('headers').placeholder = '{"Authorization": "Bearer ..."}';
            } else {
                document.getElementById('headers').placeholder = '{}';
            }
        }

        function setPresetAndShowApi() {
            const preset = document.getElementById('preset').value;
            if (!preset) {
                document.getElementById('apiDetail').value = '';
                setPreset();
                return;
            }
            let data = JSON.parse(preset);
            // Tampilkan method dan url di input detail
            document.getElementById('apiDetail').value = `[${data.method}] ${data.url}`;
            setPreset();
        }

        function fillAuthHeader() {
            const headersInput = document.getElementById('headers');
            let headersObj = {};
            try {
                headersObj = headersInput.value.trim() ? JSON.parse(headersInput.value) : {};
            } catch {
                headersObj = {};
            }
            headersObj = {
                ...headersObj,
                Authorization: 'Bearer <token>'
            };
            headersInput.value = JSON.stringify(headersObj, null, 2);
        }

        function resetForm() {
            document.getElementById('method').value = 'GET';
            document.getElementById('url').value = '';
            document.getElementById('headers').value = '';
            document.getElementById('body').value = '';
            document.getElementById('api-note').innerHTML = '';
            document.getElementById('apiDetail').value = '';
            document.getElementById('headers').placeholder = '{}';
        }

        function sendRequest() {
            const method = document.getElementById('method').value;
            let url = document.getElementById('url').value;
            if (!url.startsWith('http')) {
                url = window.location.origin + url;
            }
            let headers = {};
            try {
                headers = JSON.parse(document.getElementById('headers').value || '{}');
            } catch (e) {
                alert('Headers harus format JSON!');
                return;
            }
            let body = document.getElementById('body').value;
            let options = {
                method,
                headers
            };
            if (['POST', 'PUT'].includes(method)) {
                try {
                    body = body ? JSON.stringify(JSON.parse(body)) : '';
                } catch (e) {
                    alert('Body harus format JSON!');
                    return;
                }
                options.body = body;
                if (!headers['Content-Type']) options.headers['Content-Type'] = 'application/json';
            }
            document.getElementById('response').style.display = 'block';
            document.getElementById('response').textContent = 'Loading...';
            fetch(url, options)
                .then(async res => {
                    let text = await res.text();
                    let pretty = '';
                    try {
                        pretty = JSON.stringify(JSON.parse(text), null, 2);
                    } catch {
                        pretty = text;
                    }
                    document.getElementById('response').textContent =
                        'Status: ' + res.status + '\n' + pretty;
                })
                .catch(err => {
                    document.getElementById('response').textContent = 'Error: ' + err;
                });
        }
    </script>
</body>

</html>
